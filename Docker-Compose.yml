version: '3'

services:

  webmvc:
      image: web 
      build:
        context: ./web
        dockerfile: Dockerfile.debug
      ports: 
      - "8080:80"
      volumes: 
        - ./web/bin/pub/:/app
      container_name: web
      depends_on:
        - applicants.api
        - identity.api
        - jobs.api

  # Container
  applicants.api:
    # Image name to start the container from
    image: applicants.api       

    # Contains the path to the dockerfile to use and the context
    build:
      context: ./services/applicants.api
      dockerfile: Dockerfile.debug

    # Exposes ports to the host machine
    ports: 
    - "8081:80"

    # Allows mount paths on host inside the container. Useful to debuggigng
    volumes: 
      - ./services/applicants.api/bin/pub/:/app

    # Custom name for container
    container_name: applicants.api

    depends_on:
      - sql.data
      - rabbitmq

  identity.api:
    image: identity.api
    environment:
      - RedisHost=user.data:6379
    build:
      context: ./services/identity.api
      dockerfile: Dockerfile.debug
    ports: 
    - "8084:80"
    volumes: 
      - ./services/identity.api/bin/pub/:/app
    container_name: identity.api
    depends_on:
      - sql.data
      - rabbitmq

  jobs.api:
    image: jobs.api
    build:
      context: ./services/jobs.api
      dockerfile: Dockerfile.debug
    ports: 
    - "8083:80"
    volumes: 
      - ./services/jobs.api/bin/pub/:/app
    container_name: jobs.api

    # Add dependency for sql.data
    depends_on:
      - sql.data

  # Don't containerize database in production
  sql.data:
    image: mssql-linux
    build:
      context: ./Database
      dockerfile: Dockerfile
    ports:
      - "5433:1433"
    container_name: mssql-linux

  # Add redis instance
  user.data:
    image: redis  

  # Rabbit MQ instance
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
    container_name: rabbitmq